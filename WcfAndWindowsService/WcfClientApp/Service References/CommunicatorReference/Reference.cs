//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfClientApp.CommunicatorReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DullResult", Namespace="http://schemas.datacontract.org/2004/07/WcfAndWindowsService")]
    [System.SerializableAttribute()]
    public partial class DullResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MultiplicandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MultiplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Multiplicand {
            get {
                return this.MultiplicandField;
            }
            set {
                if ((this.MultiplicandField.Equals(value) != true)) {
                    this.MultiplicandField = value;
                    this.RaisePropertyChanged("Multiplicand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Multiplier {
            get {
                return this.MultiplierField;
            }
            set {
                if ((this.MultiplierField.Equals(value) != true)) {
                    this.MultiplierField = value;
                    this.RaisePropertyChanged("Multiplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Product {
            get {
                return this.ProductField;
            }
            set {
                if ((this.ProductField.Equals(value) != true)) {
                    this.ProductField = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="WcfAndWindowsService", ConfigurationName="CommunicatorReference.ICommunicator")]
    public interface ICommunicator {
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfAndWindowsService/ICommunicator/GetLastResult", ReplyAction="WcfAndWindowsService/ICommunicator/GetLastResultResponse")]
        WcfClientApp.CommunicatorReference.DullResult GetLastResult();
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfAndWindowsService/ICommunicator/GetLastResult", ReplyAction="WcfAndWindowsService/ICommunicator/GetLastResultResponse")]
        System.Threading.Tasks.Task<WcfClientApp.CommunicatorReference.DullResult> GetLastResultAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfAndWindowsService/ICommunicator/SetMultiplier", ReplyAction="WcfAndWindowsService/ICommunicator/SetMultiplierResponse")]
        void SetMultiplier(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfAndWindowsService/ICommunicator/SetMultiplier", ReplyAction="WcfAndWindowsService/ICommunicator/SetMultiplierResponse")]
        System.Threading.Tasks.Task SetMultiplierAsync(int value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicatorChannel : WcfClientApp.CommunicatorReference.ICommunicator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommunicatorClient : System.ServiceModel.ClientBase<WcfClientApp.CommunicatorReference.ICommunicator>, WcfClientApp.CommunicatorReference.ICommunicator {
        
        public CommunicatorClient() {
        }
        
        public CommunicatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommunicatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfClientApp.CommunicatorReference.DullResult GetLastResult() {
            return base.Channel.GetLastResult();
        }
        
        public System.Threading.Tasks.Task<WcfClientApp.CommunicatorReference.DullResult> GetLastResultAsync() {
            return base.Channel.GetLastResultAsync();
        }
        
        public void SetMultiplier(int value) {
            base.Channel.SetMultiplier(value);
        }
        
        public System.Threading.Tasks.Task SetMultiplierAsync(int value) {
            return base.Channel.SetMultiplierAsync(value);
        }
    }
}
